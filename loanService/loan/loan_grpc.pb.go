// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: loan.proto

package loan

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LoanService_ApplyLoan_FullMethodName   = "/LoanService/ApplyLoan"
	LoanService_ApproveLoan_FullMethodName = "/LoanService/ApproveLoan"
	LoanService_RejectLoan_FullMethodName  = "/LoanService/RejectLoan"
)

// LoanServiceClient is the client API for LoanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Loan service definition
type LoanServiceClient interface {
	ApplyLoan(ctx context.Context, in *ApplyLoanRequest, opts ...grpc.CallOption) (*ApplyLoanResponse, error)
	ApproveLoan(ctx context.Context, in *ApproveLoanRequest, opts ...grpc.CallOption) (*ApproveLoanResponse, error)
	RejectLoan(ctx context.Context, in *RejectLoanRequest, opts ...grpc.CallOption) (*RejectLoanResponse, error)
}

type loanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoanServiceClient(cc grpc.ClientConnInterface) LoanServiceClient {
	return &loanServiceClient{cc}
}

func (c *loanServiceClient) ApplyLoan(ctx context.Context, in *ApplyLoanRequest, opts ...grpc.CallOption) (*ApplyLoanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyLoanResponse)
	err := c.cc.Invoke(ctx, LoanService_ApplyLoan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanServiceClient) ApproveLoan(ctx context.Context, in *ApproveLoanRequest, opts ...grpc.CallOption) (*ApproveLoanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveLoanResponse)
	err := c.cc.Invoke(ctx, LoanService_ApproveLoan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanServiceClient) RejectLoan(ctx context.Context, in *RejectLoanRequest, opts ...grpc.CallOption) (*RejectLoanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectLoanResponse)
	err := c.cc.Invoke(ctx, LoanService_RejectLoan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoanServiceServer is the server API for LoanService service.
// All implementations must embed UnimplementedLoanServiceServer
// for forward compatibility.
//
// Loan service definition
type LoanServiceServer interface {
	ApplyLoan(context.Context, *ApplyLoanRequest) (*ApplyLoanResponse, error)
	ApproveLoan(context.Context, *ApproveLoanRequest) (*ApproveLoanResponse, error)
	RejectLoan(context.Context, *RejectLoanRequest) (*RejectLoanResponse, error)
	mustEmbedUnimplementedLoanServiceServer()
}

// UnimplementedLoanServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoanServiceServer struct{}

func (UnimplementedLoanServiceServer) ApplyLoan(context.Context, *ApplyLoanRequest) (*ApplyLoanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyLoan not implemented")
}
func (UnimplementedLoanServiceServer) ApproveLoan(context.Context, *ApproveLoanRequest) (*ApproveLoanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveLoan not implemented")
}
func (UnimplementedLoanServiceServer) RejectLoan(context.Context, *RejectLoanRequest) (*RejectLoanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectLoan not implemented")
}
func (UnimplementedLoanServiceServer) mustEmbedUnimplementedLoanServiceServer() {}
func (UnimplementedLoanServiceServer) testEmbeddedByValue()                     {}

// UnsafeLoanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoanServiceServer will
// result in compilation errors.
type UnsafeLoanServiceServer interface {
	mustEmbedUnimplementedLoanServiceServer()
}

func RegisterLoanServiceServer(s grpc.ServiceRegistrar, srv LoanServiceServer) {
	// If the following call pancis, it indicates UnimplementedLoanServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoanService_ServiceDesc, srv)
}

func _LoanService_ApplyLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServiceServer).ApplyLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanService_ApplyLoan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServiceServer).ApplyLoan(ctx, req.(*ApplyLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanService_ApproveLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServiceServer).ApproveLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanService_ApproveLoan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServiceServer).ApproveLoan(ctx, req.(*ApproveLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanService_RejectLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServiceServer).RejectLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanService_RejectLoan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServiceServer).RejectLoan(ctx, req.(*RejectLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoanService_ServiceDesc is the grpc.ServiceDesc for LoanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LoanService",
	HandlerType: (*LoanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyLoan",
			Handler:    _LoanService_ApplyLoan_Handler,
		},
		{
			MethodName: "ApproveLoan",
			Handler:    _LoanService_ApproveLoan_Handler,
		},
		{
			MethodName: "RejectLoan",
			Handler:    _LoanService_RejectLoan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loan.proto",
}
